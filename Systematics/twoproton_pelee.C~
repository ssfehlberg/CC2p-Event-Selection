#define twoproton_pelee_cxx
#include "twoproton_pelee.h"
#include "histogram_funcs.h"
#include "selection.h"
#include "constants.h"
using namespace Constants;
#include <chrono>
using namespace std::chrono;

void twoproton_pelee::Loop()
{
  auto start = high_resolution_clock::now(); 

  //Define objects of classes
  ////////////////////////////
  Selection cuts; //cuts.h: contains all the cuts I will apply
  histogram_funcs hist; //histograms_funcs.h: contains all the histogram functions
  //helper_funcs help; //helper_funcs.h: contains things like "In FV"

  //Making a new Root File that will contain all the histograms that we will want to plot and files with good RSEs:
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////
  TFile* tfile;
  if(use_xsec_binning == true){
     tfile = new TFile(Form("root_files/%s/histograms_pelee_xsec_%s.root",directory,sample),"RECREATE");
  } else {
    tfile = new TFile(Form("root_files/%s/histograms_pelee_%s.root",directory,sample),"RECREATE");
  }

  //Open files to contain the RSE of Good events
  ////////////////////////////////////////////////
  ofstream myfile;//File that will contain RSE of good events                                          
  myfile.open(Form("lists/%s/%s_selected_events.csv",directory,sample));
  myfile<<"Run"<<" "<<"Subrun"<<" "<<"Event"<<endl;

  ofstream cc2p; //File that will contain good cc2p events                                                                   
  cc2p.open(Form("lists/%s/selected_cc2p_evets.csv",directory));
  cc2p<<"Run"<<" "<<"Subrun"<<" "<<"Event"<<endl;

  //Define all the histograms I am going to fill and the mc_wgt                                
  /////////////////////////////////////////////////////////////
  hist.Define_Histograms(Form("%s",sample),Overlay);
  double event_weight; //event weight
  double mc_wgt; //MC weight. Overlay and Dirt Only
  int ohshit_denom = 0;
  int ohshit_num = 0;
  int total_muon = 0;
  int flip_muon = 0;
  int total_lead = 0;
  int flip_lead = 0;
  int total_recoil = 0;
  int flip_recoil = 0;

  if (fChain == 0) return;
  Long64_t nentries = fChain->GetEntriesFast();
  std::cout<<"Total Number of Entries: "<<nentries<<std::endl;
  Long64_t nbytes = 0, nb = 0;
  for (Long64_t jentry=0; jentry<nentries;jentry++) {
    Long64_t ientry = LoadTree(jentry);
    if (ientry < 0) break;
    nb = fChain->GetEntry(jentry); nbytes += nb;

    std::cout<<"-----------------------------------"<<std::endl;
    std::cout<<"BEGINNING TO PROCESS RUN: " <<run << "  SUBRUN: "<< sub << "  EVENT: " << evt <<std::endl;
    std::cout<<"-----------------------------------"<<std::endl;

    //Need to set the event weight for samples
    ////////////////////////////////////////////////

    //Overlay and Dirt
    if(Overlay == true || Dirt == true){
      if(std::isfinite(weightTune) && weightTune <= 100.) {
	mc_wgt = weightSplineTimesTune;
      } else {
	mc_wgt = 1 * weightSpline;
      }
      event_weight = pot_weight * mc_wgt;

      //BNB & EXT
    } else {
      event_weight = pot_weight;
    } //end of else

    //Checking how many nue's & neutrino slices we have
    /////////////////////////////////
    if(nu_pdg == 12) nue++;
    if(nslice == 0){
      neutrinos_0++;
    }else if(nslice == 1){
      neutrinos_1++;
    }else{
      neutrinos_else++;
    }

    //Create a TVector3 of the reco and true vertex
    TVector3 reco_nu_vtx(reco_nu_vtx_sce_x,reco_nu_vtx_sce_y,reco_nu_vtx_sce_z);
    TVector3 true_nu_vtx(true_nu_vtx_x,true_nu_vtx_y,true_nu_vtx_z);
    TVector3 true_nu_vtx_sce(true_nu_vtx_sce_x,true_nu_vtx_sce_y,true_nu_vtx_sce_z);

    //Fill the MC thresholds. 
    //I need to rewrite this, but everytime i try, i fuck it up!
    /////////////////////////////////////////////////////////
    int mc_n_threshold_muon = 0;
    int mc_n_threshold_proton = 0;
    int mc_n_threshold_pion0 = 0;
    int mc_n_threshold_pionpm = 0;
    std::vector<int> testVector;
    std::vector<double> mc_mom_vector;

    if(Overlay == true){
      
      for ( size_t p = 0u; p < mc_pdg->size(); ++p ) {
	int pdg = mc_pdg->at( p );
	float energy = mc_E->at( p );
	if ( std::abs(pdg) == 13) {
	  double mom = real_sqrt( std::pow(energy, 2) - std::pow(MASS_MUON, 2) );
	  if(_debug) std::cout<<"Value of the Muon Momentum: "<<mom<<std::endl;
	  if ( mom > MUON_MOM_CUT_LOW && mom < MUON_MOM_CUT_HIGH ) {
	    mc_n_threshold_muon++;
	  }
	} else if (std::abs(pdg) == 2212 ) {
	  double mom = real_sqrt( std::pow(energy, 2) - std::pow(MASS_PROTON, 2) );
	  if(_debug) std::cout<<"Value of the Proton Momentum: "<<mom<<std::endl;
	  if ( mom > PROTON_MOM_CUT_LOW && mom < PROTON_MOM_CUT_HIGH) {
	    mc_n_threshold_proton++;
	  }
	} else if ( pdg == 111 ) {
	  double mom = real_sqrt( std::pow(energy, 2) - std::pow(MASS_PION0, 2) );
	  if(_debug) std::cout<<"Value of the Pion0 Momentum: "<<mom<<std::endl;
	  if ( mom > PION0_MOM_CUT) {
	    mc_n_threshold_pion0++;
	  }
	} else if (std::abs(pdg) == 211 ) {
	  double mom = real_sqrt( std::pow(energy, 2) - std::pow(MASS_PIONPM, 2) );
	  if(_debug) std::cout<<"Value of the PionPM Momentum: "<<mom<<std::endl;
	  if ( mom > CHARGED_PI_MOM_CUT ) {
	    mc_n_threshold_pionpm++;
	  }
	}
      }
    
      if(_debug) std::cout<<"Value of POT_WEIGHT: "<<pot_weight<<std::endl;
      if(_debug) std::cout<<"Value of MC_Wgt: "<<mc_wgt<<std::endl;
      if(_debug) std::cout<<"Value of Muon Low Mom Cut: "<<MUON_MOM_CUT_LOW<<std::endl;
      if(_debug) std::cout<<"Value of Muon High Mom Cut: "<<MUON_MOM_CUT_HIGH<<std::endl;
      if(_debug) std::cout<<"Value of Proton Low Mom Cut: "<<PROTON_MOM_CUT_LOW<<std::endl;
      if(_debug) std::cout<<"Value of Proton High Mom Cut: "<<PROTON_MOM_CUT_HIGH<<std::endl;
      if(_debug) std::cout<<"Number of threshold muons: "<<mc_n_threshold_muon<<std::endl;
      if(_debug) std::cout<<"Number of threshold protons: "<<mc_n_threshold_proton<<std::endl;
      if(_debug) std::cout<<"Number of threshold pion0: "<<mc_n_threshold_pion0<<std::endl;
      if(_debug) std::cout<<"Number of threshold pionpm: "<<mc_n_threshold_pionpm<<std::endl;


      //making sure that the mc_pdg and npfps are the same length cause fuck me
      //////////////////////////////////////////////////////////////////////////
      for(size_t i = 0u; i < mc_pdg->size(); i++){
	testVector.push_back(mc_pdg->at(i));
	TVector3 mom_temp(mc_px->at(i),mc_py->at(i),mc_pz->at(i));
	mc_mom_vector.push_back(mom_temp.Mag());
      }
      for(int i = 0; i < n_pfps; i++){
	if(i >= mc_pdg->size()){
	  testVector.resize(i+1);
	  mc_mom_vector.resize(i+1);
	}
      }
      
      //Fill the Overlay BOOL
      cuts.Overlay_In_FV(10,10,10,10,10,10,true_nu_vtx_sce[0],true_nu_vtx_sce[1],true_nu_vtx_sce[2]);

      //What type of event is this?
      hist.MC_Event_Type(ccnc, interaction, nu_pdg, mc_n_threshold_muon, mc_n_threshold_proton,mc_n_threshold_pion0, mc_n_threshold_pionpm, cuts.fv);

    } //end of if Overlay == true

    //Now to apply the selection. We require the following:
    // 1) Event must be in the fiducial volume. We define this to be 10 cm from any TPC edge
    // 2) There must be exactly 3 PFPs in the event (npfps == 3), 3 tracks with track score above 0.8, 3 tracks with distance less than 4cm to the vertex, and events with exactly 1 muon and 2 protons (pid)
    //3) The particles must have good momentum. 
    ///////////////////////////////////////////////

    //Fill Histograms Before the Selection
    hist.Fill_Histograms(Overlay,0,reco_nu_vtx,true_nu_vtx,true_nu_vtx_sce,CosmicIP,topological_score,event_weight);

    //1) Event must be in the FV, defined to be 10cm from any TPC edge 
    cuts.In_FV(10,10,10,10,10,10,reco_nu_vtx[0],reco_nu_vtx[1],reco_nu_vtx[2]); //returns fv bool
    hist.Fill_Histograms(Overlay,1,reco_nu_vtx,true_nu_vtx,true_nu_vtx_sce,CosmicIP,topological_score,event_weight);

    //2)  There must be exactly 3 PFPs in the event (npfps == 3), 3 tracks with track score above 0.8, 3 tracks with distance less than 4cm to the vertex, and events with exactly 1 muon and 2 protons (pid)
    int tracks_w_good_score = 0;
    int tracks_w_good_distance = 0;
    int muons = 0;
    int protons = 0;
    for(int i = 0; i < n_pfps; i ++){
      float track_score = trk_score_v->at(i);
      float track_distance = trk_distance_v->at(i);
      float track_pid = trk_llr_pid_score_v->at(i);
      if(track_score >= TRACK_SCORE_CUT){
        tracks_w_good_score++;
      }
      if(track_distance <= TRACK_DIST_CUT){
        tracks_w_good_distance++;
      }
      if(track_pid >= PID_CUT && track_pid < 1 && track_pid > -1){
        muons++;
      }
      if(track_pid < PID_CUT && track_pid < 1 && track_pid > -1){
        protons++;
      }
    }

    //Here is the function that calculates this.
    cuts.Event_Selection(n_pfps, tracks_w_good_score, tracks_w_good_distance, muons, protons); //returns bool for the pfp selection + pid
    //hist.Fill_Track_Plots(); //fil the track plots with the track ids and such
    hist.Fill_Histograms(Overlay,2,reco_nu_vtx,true_nu_vtx,true_nu_vtx_sce,CosmicIP,topological_score,event_weight);

    /////////////////////////////////////////////////////////////
    //Okay. Now we have to identify the leading and recoil proton
    // Determine if these are contained and define there momentum vectors
    ////////////////////////////////////////////////////////////
    int muon_id;
    int leading_proton_id;
    int recoil_proton_id;
    std::vector<int> proton_id_vector;
    for(int i=0; i < trk_pfp_id_v->size(); i++){
      int trk_id = trk_pfp_id_v->at(i);
      double trk_pid = trk_llr_pid_score_v->at(i);	
      if(trk_pid >= PID_CUT && trk_pid < 1 && trk_pid > -1.0) {
	muon_id = trk_id - 1;
      }
      if(trk_pid < PID_CUT && trk_pid < 1 && trk_pid > -1.0){
	proton_id_vector.push_back(trk_id);
      }
    }

    float mom0 = trk_energy_proton_v->at(proton_id_vector[0]-1);
    float mom1 = trk_energy_proton_v->at(proton_id_vector[1]-1);
    if (abs(mom0) > abs(mom1)){
      leading_proton_id = proton_id_vector[0] - 1; //you have to do the -1 cause of course the id's are indexed at one like fucking losers
      recoil_proton_id = proton_id_vector[1] - 1;
    }else{
      leading_proton_id = proton_id_vector[1] - 1;
      recoil_proton_id = proton_id_vector[0] - 1;
    }

    //Now to get the three momentum vectors
    /////////////////////////////////////////

    //Muon
    //////////
    
    //First check is the muon if fully contained
    bool muon_start_contained = cuts.In_FV(10,10,10,10,10,10,trk_sce_start_x_v->at(muon_id),trk_sce_start_y_v->at(muon_id),trk_sce_start_z_v->at(muon_id)); //is the muon start within the FV?
    bool muon_end_contained = cuts.In_FV(0,0,0,0,0,0,trk_sce_end_x_v->at(muon_id),trk_sce_end_y_v->at(muon_id),trk_sce_end_z_v->at(muon_id)); //is the muon end within the detector?
    if(muon_start_contained == false) continue;
    muon_contained[0]++;
    if(muon_start_contained == true && muon_end_contained == false)continue;
    muon_contained[1]++;
    if(muon_start_contained == false && muon_end_contained == false) continue;
    muon_contained[2]++;

    //now to define the momentum
    TVector3 vMuon(1,1,1);
    vMuon.SetMag(trk_range_muon_mom_v->at(muon_id));
    double EMuon = std::sqrt(std::pow(trk_range_muon_mom_v->at(muon_id),2)+std::pow(MASS_MUON,2)) - MASS_MUON;
    /* double EMuon = 0;
    if(muon_start_contained == true && muon_end_contained == true){
      EMuon = std::sqrt(std::pow(trk_range_muon_mom_v->at(muon_id),2)+std::pow(MASS_MUON,2)) - MASS_MUON;
      vMuon.SetMag(trk_range_muon_mom_v->at(muon_id));
    } else if (muon_start_contained == true && muon_end_contained == false)//{
      EMuon = std::sqrt(std::pow(trk_mcs_muon_mom_v->at(muon_id),2)+std::pow(MASS_MUON,2)) - MASS_MUON;
      vMuon.SetMag(trk_mcs_muon_mom_v->at(muon_id));
      }
    */
    vMuon.SetTheta(trk_theta_v->at(muon_id));
    vMuon.SetPhi(trk_phi_v->at(muon_id));
    TLorentzVector muon(vMuon[0],vMuon[1],vMuon[2],EMuon);
    total_muon++;

    //flip momentum if the track start and end are flipped
    float  muon_track_start_distance_reco = trk_distance_v->at(muon_id); //distance from start to vertex: reconstructed         
    TVector3 muon_track_end_reco(trk_sce_end_x_v->at(muon_id),trk_sce_end_y_v->at(muon_id),trk_sce_end_z_v->at(muon_id)); //leading track end reco                                                                                                               
    muon_track_end_reco -= reco_nu_vtx;
    double muon_track_end_distance_reco = muon_track_end_reco.Mag(); //distance from end to vertex: reconstructed   
    if(_debug) std::cout<<"Muon 4 Vector: ("<<muon[0]<<","<<muon[1]<<","<<muon[2]<<","<<muon[3]<<")"<<std::endl;
    if(_debug) std::cout<<"[Reconstructed] Muon Start Distance: "<<muon_track_start_distance_reco<<" Muon End Distance: "<<muon_track_end_distance_reco<<std::endl;
    if(_debug) std::cout<<"Muon PID Value: "<<trk_llr_pid_score_v->at(muon_id)<<std::endl;

    if(muon_track_start_distance_reco > muon_track_end_distance_reco){
      vMuon *= (-1.0); //three vector
      muon.SetPxPyPzE(vMuon[0],vMuon[1],vMuon[2],EMuon); //four vector
      flip_muon++;
    }
    if(_debug) std::cout<<"After Flipping: Muon 4 Vector: ("<<muon[0]<<","<<muon[1]<<","<<muon[2]<<","<<muon[3]<<")"<<std::endl;

    //Leading Proton
    /////////////////////
    
    //first check is lead proton is fully contained
    bool lead_start_contained = cuts.In_FV(10,10,10,10,10,10,trk_sce_start_x_v->at(leading_proton_id),trk_sce_start_y_v->at(leading_proton_id),trk_sce_start_z_v->at(leading_proton_id)); //start of the lead proton within the FV
    bool lead_end_contained = cuts.In_FV(0,0,0,0,0,0,trk_sce_end_x_v->at(leading_proton_id),trk_sce_end_y_v->at(leading_proton_id),trk_sce_end_z_v->at(leading_proton_id)); //is end of the lead proton within the detector
    if(lead_start_contained == false) continue;
    lead_contained[0]++;
    if(lead_start_contained == true && lead_end_contained == false)continue;
    lead_contained[1]++;
    if(lead_start_contained == false && lead_end_contained == false) continue;
    lead_contained[2]++;

    //now define the momentum
    TVector3 vLead(1,1,1);
    float ELead = trk_energy_proton_v->at(leading_proton_id);
    vLead.SetMag(std::sqrt(std::pow(ELead + MASS_PROTON,2) - std::pow(MASS_PROTON,2)));
    vLead.SetTheta(trk_theta_v->at(leading_proton_id));
    vLead.SetPhi(trk_phi_v->at(leading_proton_id));
    TLorentzVector lead(vLead[0],vLead[1],vLead[2],ELead);
    total_lead++;

    //flip momentum if the track start and end are flipped
    float lead_track_start_distance_reco = trk_distance_v->at(leading_proton_id); //distance from start to vertex: reconstructed 
    TVector3 lead_track_end_reco(trk_sce_end_x_v->at(leading_proton_id),trk_sce_end_y_v->at(leading_proton_id),trk_sce_end_z_v->at(leading_proton_id)); //leading track end reco
    lead_track_end_reco -= reco_nu_vtx;
    double lead_track_end_distance_reco = lead_track_end_reco.Mag(); //distance from end to vertex: reconstructed
    if(_debug) std::cout<<"Leading Proton 4 Vector: ("<<lead[0]<<","<<lead[1]<<","<<lead[2]<<","<<lead[3]<<")"<<std::endl;
    if(_debug) std::cout<<"[Reconstructed] Leading Start Distance: "<<lead_track_start_distance_reco<<" Leading End Distance: "<<lead_track_end_distance_reco<<std::endl;
    if(_debug) std::cout<<"Leading PID Value: "<<trk_llr_pid_score_v->at(leading_proton_id)<<std::endl;

    if(lead_track_start_distance_reco > lead_track_end_distance_reco){
      vLead *= (-1.0); //three vector
      lead.SetPxPyPzE(vLead[0],vLead[1],vLead[2],ELead); //four vector
      flip_lead++;
    }
    if(_debug) std::cout<<"After Flipping: Leading Proton 4 Vector: ("<<lead[0]<<","<<lead[1]<<","<<lead[2]<<","<<lead[3]<<")"<<std::endl;

    //Recoil Proton
    ////////////////////////

    //first check if recoil proton is fully contained
    bool recoil_start_contained = cuts.In_FV(10,10,10,10,10,10,trk_sce_start_x_v->at(recoil_proton_id),trk_sce_start_y_v->at(recoil_proton_id),trk_sce_start_z_v->at(recoil_proton_id)); //start of the recoil proton within the FV                              
    bool recoil_end_contained = cuts.In_FV(0,0,0,0,0,0,trk_sce_end_x_v->at(recoil_proton_id),trk_sce_end_y_v->at(recoil_proton_id),trk_sce_end_z_v->at(recoil_proton_id)); //is end of the recoil proton within the detector                                    
    if(recoil_start_contained == false) continue;
    recoil_contained[0]++;
    if(recoil_start_contained == true && recoil_end_contained == false) continue;
    recoil_contained[1]++;
    if(recoil_start_contained == false && recoil_end_contained == false) continue;
    recoil_contained[2]++;

    //now define the momentum
    TVector3 vRec(1,1,1);
    float ERec = trk_energy_proton_v->at(recoil_proton_id);
    vRec.SetMag(std::sqrt(std::pow(ERec + MASS_PROTON,2) - std::pow(MASS_PROTON,2)));
    vRec.SetTheta(trk_theta_v->at(recoil_proton_id));
    vRec.SetPhi(trk_phi_v->at(recoil_proton_id));
    TLorentzVector rec(vRec[0],vRec[1],vRec[2],ERec);
    total_recoil++;

    //flip the momentum if the track start and end are flipped
    float recoil_track_start_distance_reco = trk_distance_v->at(recoil_proton_id); //distance from start to vertex: reconstructe
    TVector3 recoil_track_end_reco(trk_sce_end_x_v->at(recoil_proton_id),trk_sce_end_y_v->at(recoil_proton_id),trk_sce_end_z_v->at(recoil_proton_id));
    recoil_track_end_reco -= reco_nu_vtx;
    double recoil_track_end_distance_reco = recoil_track_end_reco.Mag(); //distance from end to vertex: reconstructed    
    if(_debug) std::cout<<"Recoil Proton 4 Vector: ("<<rec[0]<<","<<rec[1]<<","<<rec[2]<<","<<rec[3]<<")"<<std::endl;
    if(_debug) std::cout<<"[Reconstructed] Recoil Start Distance: "<<recoil_track_start_distance_reco<<" Recoil End Distance: "<<recoil_track_end_distance_reco<<std::endl;
    if(_debug) std::cout<<"Recoil PID Value: "<<trk_llr_pid_score_v->at(recoil_proton_id)<<std::endl;

    if(recoil_track_start_distance_reco > recoil_track_end_distance_reco){
      vRec *= (-1.0); //three vector                                                                                                         
      rec.SetPxPyPzE(vRec[0],vRec[1],vRec[2],ERec); //four vector 
      flip_recoil++;
    }
    if(_debug) std::cout<<"After Flipping: Recoil Proton 4 Vector: ("<<rec[0]<<","<<rec[1]<<","<<rec[2]<<","<<rec[3]<<")"<<std::endl;

    /////////////////////////////////////////////////////////////////////////////////////
    //3) Require the muon, leading proton, and recoil proton to be within Momentum Limits
    ////////////////////////////////////////////////////////////////////////////////////
    cuts.Reco_Momentum(vMuon, vLead, vRec);
    //hist.Fill_Particles(Overlay, vMuon,muon,vLead,lead,vRec,rec,event_weight);

    //////////////////////////////////////////////////////////////////
    //Now to fill the Reco_Event Boolean, and fill the final counters
    //Also clean up the stupid vectors
    /////////////////////////////////////////////////////////////////
    cuts.Reco_Event(); 
    cuts.Fill_Counters(Overlay, true_nu_vtx_sce[0],true_nu_vtx_sce[1],true_nu_vtx_sce[2],ccnc, nu_pdg, mc_n_threshold_muon, mc_n_threshold_proton, mc_n_threshold_pion0, mc_n_threshold_pionpm,interaction); //fills the counters

    //Make sure to clean up before you finish                                                                                                                                                                                                                     
    if(Overlay == true){
      proton_id_vector.clear();
      testVector.clear();
    }

    events_remaining++;

  } //END OF LOOP OVER EVENTS

  ///////////////////////////////////////////////////////////////
  //Making an Output CSV to save the number of events after cuts;
  ////////////////////////////////////////////////////////////////
  std::ofstream csv_file;
  csv_file.open(Form("%s/%s.csv",directory,sample));
  csv_file << Form("Number of Events to Begin With, %lld, Fraction of Total, %f", nentries, float(100.*float(nentries)/float(nentries)));
  csv_file << Form("Number of Events with Vertex in FV, %d , Fraction of Total,%f \n",fvcntr,float(100.*float(fvcntr)/float(nentries)));
  csv_file << Form("Number of Events with 3 PFPs , %d , Fraction of Total,%f \n",threepfps,float(100.*float(threepfps)/float(nentries)));
  csv_file << Form("Number of Events with 3 Tracks , %d , Fraction of Total,%f \n",threetrkcntr,float(100.*float(threetrkcntr)/float(nentries)));
  csv_file << Form("Number of Events with 3 Tracks Connected to the Vertex, %d , Fraction of Total,%f \n",threetrk_connected,float(100.*float(threetrk_connected)/float(nentries)));
  csv_file << Form("Number of Events with 1 Muon and 2 Protons, %d , Fraction of Total,%f \n",pid,float(100.*float(pid)/float(nentries)));
  csv_file << Form("Number of Events with Reco. Muon Momentum above %f and below %f GeV/c, %d , Fraction of Total,%f \n",MUON_MOM_CUT_LOW, MUON_MOM_CUT_HIGH,reco_muon_mom_cut,float(100.*float(reco_muon_mom_cut)/float(nentries)));
  csv_file << Form("Number of Events with Reco. Leading Momentum above %f and below %f GeV/c, %d , Fraction of Total,%f \n",PROTON_MOM_CUT_LOW, PROTON_MOM_CUT_HIGH,reco_muon_mom_cut,float(100.*float(reco_lead_mom_cut)/float(nentries)));
  csv_file << Form("Number of Events with Reco. Recoil Momentum above %f and below %f GeV/c, %d , Fraction of Total,%f \n",PROTON_MOM_CUT_LOW, PROTON_MOM_CUT_HIGH,reco_muon_mom_cut,float(100.*float(reco_recoil_mom_cut)/float(nentries)));  
  csv_file << Form("Sanity Check of the  Total Number of Events Remaining, %d \n",events_remaining);
  csv_file.close();

  if(print_module_summary){
    std::cout<<"-----MODULE SUMMARY-----"<<std::endl;
    std::cout << "[ANALYZER] Initial Number of Events: "<<nentries<<" Fraction of Total: "<<float(100.*float(nentries)/float(nentries))<<"%"<<std::endl;
    std::cout << "[ANALYZER] Number of Events with Vertex in FV: "<<fvcntr<<" Fraction of Total: "<<float(100.*float(fvcntr)/float(nentries))<<"%"<<std::endl;
    std::cout << "[ANALYZER] Number of Events with 3 PFPs: "<<threepfps<<" Fraction of Total: "<<float(100.*float(threepfps)/float(nentries))<<"%"<<std::endl;
    std::cout << "[ANALYZER] Number of Events with 3 Tracks: "<<threetrkcntr<<" Fraction of Total: "<<float(100.*float(threetrkcntr)/float(nentries))<<"%"<<std::endl;
    std::cout << "[ANALYZER] Number of Events with 3 Tracks Connected to Vertex: "<<threetrk_connected<<" Fraction of Total: "<<float(100.*float(threetrk_connected)/float(nentries))<<"%"<<std::endl;
    std::cout << "[ANALYZER] Number of Events with 1 Muon and 2 Protons: "<<pid<<" Fraction of Total: "<<float(100.*float(pid)/float(nentries))<<"%"<<std::endl;
    std::cout << "[ANALYZER] Number of Events with Reco. Muon Momentum above 0.1 GeV and below 2.5 GeV: "<<reco_muon_mom_cut<<" Fraction of Total: "<<float(100.*float(reco_muon_mom_cut)/float(nentries))<<"%"<<std::endl;
    std::cout << "[ANALYZER] Number of Events with Reco. Lead Momentum above 0.1 GeV and below 2.5 GeV: "<<reco_lead_mom_cut<<" Fraction of Total: "<<float(100.*float(reco_lead_mom_cut)/float(nentries))<<"%"<<std::endl;
    std::cout << "[ANALYZER] Number of Events with Reco. Recoil Momentum above 0.1 GeV and below 2.5 GeV: "<<reco_recoil_mom_cut<<" Fraction of Total: "<<float(100.*float(reco_recoil_mom_cut)/float(nentries))<<"%"<<std::endl;
    std::cout << "[ANALYZER] Sanity Check of the Total Number of Events Remaining: "<<events_remaining<<std::endl;
    std::cout <<"-----CLOSING TIME. YOU DON'T HAVE TO GO HOME, BUT YOU CAN'T STAY HERE-----"<<std::endl;
  }

  if(Overlay == true){
  
    //Before we finish the overlay, we need to make the efficiency and purity plots:
    ///////////////////////////////////////////////////////////////////
    std::vector<int> cut_values = {static_cast<int>(nentries),fvcntr,threepfps,threetrkcntr, threetrk_connected, pid, reco_recoil_mom_cut};
    std::vector<pair<double,double>> eff_pur; 
    for(int i = 0; i < cut_values.size(); i++){
      double eff = double(cc2p0pi[i]) / double(cc2p0pi[0]);
      double purity = double(cc2p0pi[i]) / double(cut_values[i]);
      if(print_module_summary) std::cout<<"Value of Efficinecy After Cut "<<i<<": "<<eff<<std::endl;
      if(print_module_summary) std::cout<<"Value of Purity After Cut "<<i<<": "<<purity<<std::endl;
      hist.eff_graph->SetPoint(i,i+1,eff);
      hist.pur_graph->SetPoint(i,i+1,purity);
      eff_pur.push_back(std::make_pair(eff,purity));
    }

    hist.eff_graph->Write("hist.eff_graph");
    hist.pur_graph->Write("pur_graph");

    //create CSV file with the selected event information
    std::ofstream overlay_csv_file;
    overlay_csv_file.open(Form("%s/%s.csv",directory,sample));

    overlay_csv_file << "EFFICIENCY AND PURITY VALUES \n";
    overlay_csv_file <<"CUT, EFFICIENCY, PURITY\n";
    overlay_csv_file << Form("No Cuts, %f, %f \n", eff_pur[0].first, eff_pur[0].second);
    overlay_csv_file << Form("FV, %f, %f \n", eff_pur[1].first, eff_pur[1].second);
    overlay_csv_file << Form("3 PFPs, %f, %f \n", eff_pur[2].first, eff_pur[2].second);
    overlay_csv_file << Form("3 Tracks, %f, %f \n", eff_pur[3].first, eff_pur[3].second);
    overlay_csv_file << Form("3 Connected Tracks, %f, %f \n", eff_pur[4].first, eff_pur[4].second);
    overlay_csv_file << Form("1 Muon, 2 Protons, %f, %f \n", eff_pur[5].first, eff_pur[5].second);
    overlay_csv_file << Form("All Threshold Cuts Applied, %f, %f \n", eff_pur[6].first, eff_pur[6].second);

    overlay_csv_file << "GENERATED EVENTS: RAQUEL \n";
    overlay_csv_file << Form("Initial Number of Events, %lld, Fraction of Total, %f \n",nentries,float(100.*float(nentries)/float(nentries)));
    overlay_csv_file << Form("Number of CCQEL Events, %d, Fraction of Total, %f \n",qel[0],float(100.*(float(qel[0])/float(nentries))));
    overlay_csv_file << Form("Number of CCRES Events, %d, Fraction of Total, %f \n",res[0],float(100.*(float(res[0])/float(nentries))));
    overlay_csv_file << Form("Number of CCDIS Events, %d, Fraction of Total, %f \n",dis[0],float(100.*(float(dis[0])/float(nentries))));
    overlay_csv_file << Form("Number of CCCOH Events, %d, Fraction of Total, %f \n",coh[0],float(100.*(float(coh[0])/float(nentries))));
    overlay_csv_file << Form("Number of CCNuE Events, %d, Fraction of Total, %f \n",ccnue_raquel[0],float(100.*(float(ccnue_raquel[0])/float(nentries))));
    overlay_csv_file << Form("Number of NC Events, %d, Fraction of Total, %f \n",nc_raquel[0],float(100.*(float(nc_raquel[0])/float(nentries))));
    overlay_csv_file << Form("Number of OOFV Events, %d, Fraction of Total, %f \n",outfv_raquel[0],float(100.*(float(outfv_raquel[0])/float(nentries))));
    overlay_csv_file << Form("Number of Else Events, %d, Fraction of Total, %f \n",other_raquel[0],float(100.*(float(other_raquel[0])/float(nentries))));
    overlay_csv_file << "\n";
      
    overlay_csv_file << "SELECTED EVENTS: RAQUEL \n";
    overlay_csv_file << Form("Number of Selected Events, %d, Fraction of Total, %f \n",events_remaining,float(100.*float(events_remaining)/float(events_remaining)));
    overlay_csv_file << Form("Number of CCQEL Events, %d, Fraction of Total, %f \n",qel[number-1],float(100.*(float(qel[number-1])/float(events_remaining))));
    overlay_csv_file << Form("Number of CCRES Events, %d, Fraction of Total, %f \n",res[number-1],float(100.*(float(res[number-1])/float(events_remaining))));
    overlay_csv_file << Form("Number of CCDIS Events, %d, Fraction of Total, %f \n",dis[number-1],float(100.*(float(dis[number-1])/float(events_remaining))));
    overlay_csv_file << Form("Number of CCCOH Events, %d, Fraction of Total, %f \n",coh[number-1],float(100.*(float(coh[number-1])/float(events_remaining))));
    overlay_csv_file << Form("Number of CCNuE Events, %d, Fraction of Total, %f \n",ccnue_raquel[number-1],float(100.*(float(ccnue_raquel[number-1])/float(events_remaining))));
    overlay_csv_file << Form("Number of NC Events, %d, Fraction of Total, %f \n",nc_raquel[number-1],float(100.*(float(nc_raquel[number-1])/float(events_remaining))));
    overlay_csv_file << Form("Number of OOFV Events, %d, Fraction of Total, %f \n",outfv_raquel[number-1],float(100.*(float(outfv_raquel[number-1])/float(events_remaining))));
    overlay_csv_file << Form("Number of Else Events, %d, Fraction of Total, %f \n",other_raquel[number-1],float(100.*(float(other_raquel[number-1])/float(events_remaining))));
    overlay_csv_file << "\n";

    overlay_csv_file << "GENERATED EVENTS: MINE \n";
    overlay_csv_file << Form("Initial Number of Events, %lld, Fraction of Total, %f \n",nentries,float(100.*float(nentries)/float(nentries)));
    overlay_csv_file << Form("Number of CC0p0pi Events, %d, Fraction of Total, %f \n",cc0p0pi[0],float(100.*float(cc0p0pi[0])/float(nentries)));
    overlay_csv_file << Form("Number of CC1p0pi Events, %d, Fraction of Total, %f \n",cc1p0pi[0],float(100.*float(cc1p0pi[0])/float(nentries)));
    overlay_csv_file << Form("Number of CC2p0pi Events, %d, Fraction of Total, %f \n",cc2p0pi[0],float(100.*float(cc2p0pi[0])/float(nentries)));
    overlay_csv_file << Form("Number of CCNp0pi Events, %d, Fraction of Total, %f \n",ccNp0pi[0],float(100.*float(ccNp0pi[0])/float(nentries)));
    overlay_csv_file << Form("Number of CCNp1pi Events, %d, Fraction of Total, %f \n",ccNp1pi[0],float(100.*float(ccNp1pi[0])/float(nentries)));
    overlay_csv_file << Form("Number of CCNpNpi Events, %d, Fraction of Total, %f \n",ccNpNpi[0],float(100.*float(ccNpNpi[0])/float(nentries)));
    overlay_csv_file << Form("Number of CCNue Events, %d, Fraction of Total, %f \n",ccnue[0], float(100.*float(ccnue[0])/float(nentries)));
    overlay_csv_file << Form("Number of NC Events, %d, Fraction of Total, %f \n",nc[0], float(100.*float(nc[0])/float(nentries)));
    overlay_csv_file << Form("Number of OOFV Events, %d, Fraction of Total, %f \n",outfv[0], float(100.*float(outfv[0])/float(nentries)));
    overlay_csv_file << Form("Number of Other Events, %d, Fraction of Total, %f \n",other[0], float(100.*float(other[0])/float(nentries)));
    overlay_csv_file << "\n";

    overlay_csv_file << "SELECTED EVENTS: MINE \n";
    overlay_csv_file << Form("Number of Selected Events, %d, Fraction of Total, %f \n",events_remaining,float(100.*float(events_remaining)/float(events_remaining)));
    overlay_csv_file << Form("Number of CC0p0pi Events, %d, Fraction of Total, %f \n",cc0p0pi[number-1],float(100.*float(cc0p0pi[number-1])/float(events_remaining)));
    overlay_csv_file << Form("Number of CC1p0pi Events, %d, Fraction of Total, %f \n",cc1p0pi[number-1],float(100.*float(cc1p0pi[number-1])/float(events_remaining)));
    overlay_csv_file << Form("Number of CC2p0pi Events, %d, Fraction of Total, %f \n",cc2p0pi[number-1],float(100.*float(cc2p0pi[number-1])/float(events_remaining)));
    overlay_csv_file << Form("Number of CCNp0pi Events, %d, Fraction of Total, %f \n",ccNp0pi[number-1],float(100.*float(ccNp0pi[number-1])/float(events_remaining)));
    overlay_csv_file << Form("Number of CCNp1pi Events, %d, Fraction of Total, %f \n",ccNp1pi[number-1],float(100.*float(ccNp1pi[number-1])/float(events_remaining)));
    overlay_csv_file << Form("Number of CCNpNpi Events, %d, Fraction of Total, %f \n",ccNpNpi[number-1],float(100.*float(ccNpNpi[number-1])/float(events_remaining)));
    overlay_csv_file << Form("Number of CCNue Events, %d, Fraction of Total, %f \n",ccnue[number-1], float(100.*float(ccnue[number-1])/float(events_remaining)));
    overlay_csv_file << Form("Number of NC Events, %d, Fraction of Total, %f \n",nc[number-1], float(100.*float(nc[number-1])/float(events_remaining)));
    overlay_csv_file << Form("Number of OOFV Events, %d, Fraction of Total, %f \n",outfv[number-1], float(100.*float(outfv[number-1])/float(events_remaining)));
    overlay_csv_file << Form("Number of Other Events, %d, Fraction of Total, %f \n",other[0], float(100.*float(other[0])/float(events_remaining)));
    overlay_csv_file << "\n";

    overlay_csv_file.close();
   
    if(print_module_summary){

      std::cout<<"-----MC GENERATED SUMMARY: RAQUEL-----"<<std::endl;
      std::cout << "[MC_RAQUEL] Initial Number of Events: "<<nentries<<std::endl;
      std::cout << "[MC_RAQUEL] Number of CCQEL Events: "<<qel[0]<<" Fraction of the Total: "<<float(100.*(float(qel[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC_RAQUEL] Number of CCRES Events: "<<res[0]<<" Fraction of the Total: "<<float(100.*(float(res[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC_RAQUEL] Number of CCMEC Events: "<<mec[0]<<" Fraction of the Total: "<<float(100.*(float(mec[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC_RAQUEL] Number of CCCOH Events: "<<coh[0]<<" Fraction of the Total: "<<float(100.*(float(coh[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC_RAQUEL] Number of CCDIS Events: "<<dis[0]<<" Fraction of the Total: "<<float(100.*(float(dis[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC_RAQUEL] Number of CCNue Events: "<<ccnue_raquel[0]<<" Fraction of the Total: "<<float(100.*(float(ccnue_raquel[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC_RAQUEL] Number of OUTFV Events: "<<outfv_raquel[0]<<" Fraction of the Total: "<<float(100.*(float(outfv_raquel[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC_RAQUEL] Number of NC Events: "<<nc_raquel[0]<<" Fraction of the Total: "<<float(100.*(float(nc_raquel[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC_RAQUEL] Number of Else Events: "<<other_raquel[0]<<" Fraction of the Total: "<<float(100.*(float(other_raquel[0])/float(nentries)))<<"%"<<std::endl;
      std::cout <<"-----MR. SAXOBEAT-----"<<std::endl;
  
      std::cout<<"-----MC GENERATED SUMMARY-----"<<std::endl;
      std::cout << "[MC] Initial Number of Events: "<<nentries<<std::endl;
      std::cout << "[MC] Number of CCOpOpi Events: "<<cc0p0pi[0]<<" Fraction of the Total: "<<float(100.*(float(cc0p0pi[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC] Number of CC1p0pi Events: "<<cc1p0pi[0]<<" Fraction of the Total: "<<float(100.*(float(cc1p0pi[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC] Number of CC2p0pi Events: "<<cc2p0pi[0]<<" Fraction of the Total: "<<float(100.*(float(cc2p0pi[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC] Number of CCNp0pi Events: "<<ccNp0pi[0]<<" Fraction of the Total: "<<float(100.*(float(ccNp0pi[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC] Number of CCNp1pi Events: "<<ccNp1pi[0]<<" Fraction of the Total: "<<float(100.*(float(ccNp1pi[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC] Number of CCNpNpi Events: "<<ccNpNpi[0]<<" Fraction of the Total: "<<float(100.*(float(ccNpNpi[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC] Number of CCNue Events: "<<ccnue[0]<<" Fraction of the Total: "<<float(100.*(float(ccnue[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC] Number of OUTFV Events: "<<outfv[0]<<" Fraction of the Total: "<<float(100.*(float(outfv[0])/float(nentries)))<<"%"<<std::endl; 
      std::cout << "[MC] Number of NC Events: "<<nc[0]<<" Fraction of the Total: "<<float(100.*(float(nc[0])/float(nentries)))<<"%"<<std::endl;
      std::cout << "[MC] Number of Else Events: "<<other[0]<<" Fraction of the Total: "<<float(100.*(float(other[0])/float(nentries)))<<"%"<<std::endl;
      std::cout <<"-----OPEN UP MY EAGER EYES! CAUSE I'M MR. BRIGHTSIDE-----"<<std::endl;

      std::cout<<"-----MC RECO'D SUMMARY: RAQUEL-----"<<std::endl;
      std::cout << "[MC_RECO_RAQUEL] Initial Number of Events That were Reconstructed: "<<events_remaining<<std::endl;
      std::cout << "[MC_RECO_RAQUEL] Number of CCQEL Events: "<<qel[number-1]<<" Fraction of the Total: "<<float(100.*(float(qel[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO_RAQUEL] Number of CCRES Events: "<<res[number-1]<<" Fraction of the Total: "<<float(100.*(float(res[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO_RAQUEL] Number of CCMEC Events: "<<mec[number-1]<<" Fraction of the Total: "<<float(100.*(float(mec[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO_RAQUEL] Number of CCCOH Events: "<<coh[number-1]<<" Fraction of the Total: "<<float(100.*(float(coh[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO_RAQUEL] Number of CCDIS Events: "<<dis[number-1]<<" Fraction of the Total: "<<float(100.*(float(dis[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO_RAQUEL] Number of CCNue Events: "<<ccnue_raquel[number-1]<<" Fraction of the Total: "<<float(100.*(float(ccnue_raquel[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO_RAQUEL] Number of OUTFV Events: "<<outfv_raquel[number-1]<<" Fraction of the Total: "<<float(100.*(float(outfv_raquel[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO_RAQUEL] Number of NC Events: "<<nc_raquel[number-1]<<" Fraction of the Total: "<<float(100.*(float(nc_raquel[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO_RAQUEL] Number of Else Events: "<<other_raquel[number-1]<<" Fraction of the Total: "<<float(100.*(float(other_raquel[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout <<"-----ONE FOR THE DAGGER, AND ONE FOR THE ONE YOU BELIEVE!!-----"<<std::endl;

      std::cout<<"-----MC RECO'D SUMMARY-----"<<std::endl;
      std::cout << "[MC_RECO] Initial Number of Events That were Reconstructed: "<<events_remaining<<std::endl;
      std::cout << "[MC_RECO] Number of CCOpOpi Events: "<<cc0p0pi[number-1]<<" Fraction of the Total: "<<float(100.*(float(cc0p0pi[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO] Number of CC1p0pi Events: "<<cc1p0pi[number-1]<<" Fraction of the Total: "<<float(100.*(float(cc1p0pi[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO] Number of CC2p0pi Events: "<<cc2p0pi[number-1]<<" Fraction of the Total: "<<float(100.*(float(cc2p0pi[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO] Number of CCNp0pi Events: "<<ccNp0pi[number-1]<<" Fraction of the Total: "<<float(100.*(float(ccNp0pi[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO] Number of CCNp1pi Events: "<<ccNp1pi[number-1]<<" Fraction of the Total: "<<float(100.*(float(ccNp1pi[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO] Number of CCNpNpi Events: "<<ccNpNpi[number-1]<<" Fraction of the Total: "<<float(100.*(float(ccNpNpi[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO] Number of CCNue Events: "<<ccnue[number-1]<<" Fraction of the Total: "<<float(100.*(float(ccnue[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO] Number of OUTFV Events: "<<outfv[number-1]<<" Fraction of the Total: "<<float(100.*(float(outfv[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO] Number of NC Events: "<<nc[number-1]<<" Fraction of the Total: "<<float(100.*(float(nc[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout << "[MC_RECO] Number of Else Events: "<<other[number-1]<<" Fraction of the Total: "<<float(100.*(float(other[number-1])/float(events_remaining)))<<"%"<<std::endl;
      std::cout <<"-----NOTHING REALLY MATTERS. ANYONE CAN SEE. NOTHING REALLY MATTERS. NOTHING REALLY MATTERS TO ME-----"<<std::endl;
    } //end of debug
  }//end of if overlay

  if(_debug){
    std::cout<<"Neutrinos 0: "<<neutrinos_0<<std::endl;
    std::cout<<"Neutrinos 1: "<<neutrinos_1<<std::endl;
    std::cout<<"Neutrinos Else: "<<neutrinos_else<<std::endl;

    std::cout<<"Other Else: "<<other_else<<std::endl;
    std::cout<<"Neutron: "<<neutron<<std::endl;
    std::cout<<"Neutrino: "<<neutrino<<std::endl;
    std::cout<<"Zeros: "<<zeros<<std::endl;

    std::cout<<"Total Protons: "<<total_protons<<std::endl;
    std::cout<<"Contained Protons: "<<contain<<std::endl;
    std::cout<<"Uncontained Protons: "<<uncontain<<std::endl;
    std::cout<<"UhOh: "<<uhoh<<std::endl;
    
    std::cout<<"cc2p0pi 0: "<<cc2p0pi[0]<<std::endl;
    std::cout<<"cc2p0pi 1: "<<cc2p0pi[1]<<std::endl;
    std::cout<<"cc2p0pi 2: "<<cc2p0pi[2]<<std::endl;
    
    std::cout<<"Contained: "<<contained<<std::endl;
    std::cout<<"Uncontained: "<<uncontained<<std::endl;
    std::cout<<"Denom Contained: "<<denom_contained<<std::endl;
    std::cout<<"Denom Uncontained: "<<denom_uncontained<<std::endl;
    std::cout<<"Num Contained: "<<num_contained<<std::endl;
    std::cout<<"Num Uncontained: "<<num_uncontained<<std::endl;

    std::cout<<"Ohshit_denom: "<<ohshit_denom<<std::endl;
    std::cout<<"OHSHIT_num: "<<ohshit_num<<std::endl;

    std::cout<<"Total Number of Muon: "<<total_muon<<std::endl;
    std::cout<<"Flip Muon: "<<flip_muon<<std::endl;
    std::cout<<"Total Number of Lead Protons: "<<total_lead<<std::endl;
    std::cout<<"Flip Lead: "<<flip_lead<<std::endl;
    std::cout<<"Total Number of Recoil Protons: "<<total_recoil<<std::endl;
    std::cout<<"Flip Recoil: "<<flip_recoil<<std::endl;
  }

  ////////////////////////////////////////////////////////////////
  //Don't forget to write all of your histograms before you leave!                                                                 
  ////////////////////////////////////////////////////////////////                                                              
  tfile->cd();
  hist.Write_Histograms(); //function that writes all our histograms                                                      
  tfile->Close(); //write the root file that contains our histograms                                                    
  myfile.close(); //Write the file that contains the RSE of good events                                                 
  if(Overlay == true){
    cc2p.close(); //Write the file that contains the RSE of good 1mu2p events
  }

  auto stop = high_resolution_clock::now();
  auto duration = duration_cast<minutes>(stop - start); 
  std::cout<<"Program Run Time: "<<duration.count()<<std::endl;
  
} //end of progrm
